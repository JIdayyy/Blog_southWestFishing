{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { withSuperJSONPage as _withSuperJSONPage } from \"babel-plugin-superjson-next/tools\";\nvar _jsxFileName = \"/home/jidayyy/Blog_southWestFishing/pages/post/[id].tsx\";\nimport Article from \"@components/Post/Article\";\n\nfunction article(props) {\n  console.log(props);\n  return /*#__PURE__*/_jsxDEV(Article, {\n    article: props.post\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 12\n  }, this);\n}\n\nexport var __N_SSG = true;\nexport default _withSuperJSONPage(article);","map":{"version":3,"sources":["/home/jidayyy/Blog_southWestFishing/pages/post/[id].tsx"],"names":["Article","article","props","console","log","post"],"mappings":";;;AAIA,OAAOA,OAAP,MAAoB,0BAApB;;AAKe,SAASC,OAAT,CAAiBC,KAAjB,EAA6C;AACxDC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAEA,sBAAO,QAAC,OAAD;AAAS,IAAA,OAAO,EAAEA,KAAK,CAACG;AAAxB;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;;AAJD,kCAAwBJ,OAAxB","sourcesContent":["import prisma from \"../../prisma/client\";\nimport { GetStaticPropsResult } from \"next\";\nimport getAllPostIds from \"../../lib/getAllPostIds\";\nimport { PostWithAuthorAndPictures } from \"pages\";\nimport Article from \"@components/Post/Article\";\n\ntype IProps = {\n    post: PostWithAuthorAndPictures;\n};\nexport default function article(props: IProps): JSX.Element {\n    console.log(props);\n\n    return <Article article={props.post} />;\n}\n\nexport async function getStaticProps(params: {\n    params: {\n        id: string;\n    };\n}): Promise<GetStaticPropsResult<IProps>> {\n    const { id } = params.params;\n\n    const post = await prisma.post.findUnique({\n        where: {\n            id: id,\n        },\n        include: {\n            picture: true,\n            author: true,\n        },\n        rejectOnNotFound: true,\n    });\n    return {\n        props: {\n            post,\n        },\n    };\n}\n\nexport async function getStaticPaths(): Promise<{\n    paths: { params: { id: string } }[];\n    fallback: boolean;\n}> {\n    const paths = await getAllPostIds();\n    return {\n        paths,\n        fallback: false,\n    };\n}\n"]},"metadata":{},"sourceType":"module"}