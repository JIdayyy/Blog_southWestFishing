{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport prisma from \"../../../../prisma/client\";\nexport default async function createComment(req, res) {\n  const body = req.body;\n  console.log(_objectSpread({}, body));\n\n  try {\n    const comment = await prisma.comment.create({\n      data: {\n        content: body.content,\n        email: body.email,\n        username: body.username,\n        post: {\n          connect: {\n            id: body.postId\n          }\n        }\n      }\n    });\n    res.status(201).json(comment);\n  } catch (error) {\n    console.log(error);\n    res.status(500).json({\n      name: \"Error\",\n      message: \"Comment Error\"\n    });\n  }\n}","map":{"version":3,"sources":["/home/jidayyy/Blog_southWestFishing/pages/api/comments/GETTERS/createComment.ts"],"names":["prisma","createComment","req","res","body","console","log","comment","create","data","content","email","username","post","connect","id","postId","status","json","error","name","message"],"mappings":";;;;;;AACA,OAAOA,MAAP,MAAmB,2BAAnB;AAQA,eAAe,eAAeC,aAAf,CACXC,GADW,EAEXC,GAFW,EAGE;AACb,QAAMC,IAAI,GAAGF,GAAG,CAACE,IAAjB;AACAC,EAAAA,OAAO,CAACC,GAAR,mBAAiBF,IAAjB;;AACA,MAAI;AACA,UAAMG,OAAO,GAAG,MAAMP,MAAM,CAACO,OAAP,CAAeC,MAAf,CAAsB;AACxCC,MAAAA,IAAI,EAAE;AACFC,QAAAA,OAAO,EAAEN,IAAI,CAACM,OADZ;AAEFC,QAAAA,KAAK,EAAEP,IAAI,CAACO,KAFV;AAGFC,QAAAA,QAAQ,EAAER,IAAI,CAACQ,QAHb;AAIFC,QAAAA,IAAI,EAAE;AACFC,UAAAA,OAAO,EAAE;AACLC,YAAAA,EAAE,EAAEX,IAAI,CAACY;AADJ;AADP;AAJJ;AADkC,KAAtB,CAAtB;AAYAb,IAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBX,OAArB;AACH,GAdD,CAcE,OAAOY,KAAP,EAAc;AACZd,IAAAA,OAAO,CAACC,GAAR,CAAYa,KAAZ;AACAhB,IAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEE,MAAAA,IAAI,EAAE,OAAR;AAAiBC,MAAAA,OAAO,EAAE;AAA1B,KAArB;AACH;AACJ","sourcesContent":["import { NextApiRequest, NextApiResponse } from \"next\";\nimport prisma from \"../../../../prisma/client\";\ninterface Data {\n    id: string;\n    content: string;\n    postId: string;\n    createdAt: Date;\n    email: string;\n}\nexport default async function createComment(\n    req: NextApiRequest,\n    res: NextApiResponse<Data | Error>,\n): Promise<void> {\n    const body = req.body;\n    console.log({ ...body });\n    try {\n        const comment = await prisma.comment.create({\n            data: {\n                content: body.content,\n                email: body.email,\n                username: body.username,\n                post: {\n                    connect: {\n                        id: body.postId,\n                    },\n                },\n            },\n        });\n        res.status(201).json(comment);\n    } catch (error) {\n        console.log(error);\n        res.status(500).json({ name: \"Error\", message: \"Comment Error\" });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}