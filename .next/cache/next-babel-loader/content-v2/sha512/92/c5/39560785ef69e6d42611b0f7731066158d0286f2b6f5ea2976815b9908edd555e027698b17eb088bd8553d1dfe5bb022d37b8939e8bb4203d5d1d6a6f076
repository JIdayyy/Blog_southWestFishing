{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport prisma from \"../../../prisma/client\";\nexport default async function commentHandler(req, res) {\n  if (req.method === \"POST\") {\n    const body = req.body;\n    console.log(_objectSpread({}, body));\n\n    try {\n      const comment = await prisma.comment.create({\n        data: {\n          content: body.content,\n          email: body.email,\n          username: body.username,\n          post: {\n            connect: {\n              id: body.postId\n            }\n          }\n        }\n      });\n      res.status(201).json(comment);\n    } catch (error) {\n      console.log(error);\n      res.status(500).json({\n        name: \"Error\",\n        message: \"Comment Error\"\n      });\n    }\n  }\n}","map":{"version":3,"sources":["/home/jidayyy/Blog_southWestFishing/pages/api/comments/index.ts"],"names":["prisma","commentHandler","req","res","method","body","console","log","comment","create","data","content","email","username","post","connect","id","postId","status","json","error","name","message"],"mappings":";;;;;;AACA,OAAOA,MAAP,MAAmB,wBAAnB;AAQA,eAAe,eAAeC,cAAf,CACXC,GADW,EAEXC,GAFW,EAGE;AACb,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACvB,UAAMC,IAAI,GAAGH,GAAG,CAACG,IAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,mBAAiBF,IAAjB;;AACA,QAAI;AACA,YAAMG,OAAO,GAAG,MAAMR,MAAM,CAACQ,OAAP,CAAeC,MAAf,CAAsB;AACxCC,QAAAA,IAAI,EAAE;AACFC,UAAAA,OAAO,EAAEN,IAAI,CAACM,OADZ;AAEFC,UAAAA,KAAK,EAAEP,IAAI,CAACO,KAFV;AAGFC,UAAAA,QAAQ,EAAER,IAAI,CAACQ,QAHb;AAIFC,UAAAA,IAAI,EAAE;AACFC,YAAAA,OAAO,EAAE;AACLC,cAAAA,EAAE,EAAEX,IAAI,CAACY;AADJ;AADP;AAJJ;AADkC,OAAtB,CAAtB;AAYAd,MAAAA,GAAG,CAACe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBX,OAArB;AACH,KAdD,CAcE,OAAOY,KAAP,EAAc;AACZd,MAAAA,OAAO,CAACC,GAAR,CAAYa,KAAZ;AACAjB,MAAAA,GAAG,CAACe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEE,QAAAA,IAAI,EAAE,OAAR;AAAiBC,QAAAA,OAAO,EAAE;AAA1B,OAArB;AACH;AACJ;AACJ","sourcesContent":["import type { NextApiRequest, NextApiResponse } from \"next\";\nimport prisma from \"../../../prisma/client\";\ninterface Data {\n    id: string;\n    content: string;\n    postId: string;\n    createdAt: Date;\n    email: string;\n}\nexport default async function commentHandler(\n    req: NextApiRequest,\n    res: NextApiResponse<Data | Error>,\n): Promise<void> {\n    if (req.method === \"POST\") {\n        const body = req.body;\n        console.log({ ...body });\n        try {\n            const comment = await prisma.comment.create({\n                data: {\n                    content: body.content,\n                    email: body.email,\n                    username: body.username,\n                    post: {\n                        connect: {\n                            id: body.postId,\n                        },\n                    },\n                },\n            });\n            res.status(201).json(comment);\n        } catch (error) {\n            console.log(error);\n            res.status(500).json({ name: \"Error\", message: \"Comment Error\" });\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}